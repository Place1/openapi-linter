{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenAPI Linter \u00b6 A simple linter for openapi (swagger) specs. Documentation Installation \u00b6 Download - Github Releases Page OpenAPI Linter is a single executable binary. You can download the latest release for your platform from the Github Releases page linked above. Or you can build it from source: git clone https://github.com/place1/openapi-linter cd openapi-linter go build ./openapi-linter --help Quickstart \u00b6 Once you've got the binary (make sure it's on your $PATH ) you can use it like this: openapi-linter ./path/to/openapi.yaml By default openapi-linter will look for a config file in the current directory called openapi-linter.yaml . Here's an example config file with some comments: # openapi-linter.yaml rules : noEmptyOperationIDs : true # make sure all operations have an ID noEmptyDescriptions : operations : true # operations must have descriptions parameters : true # parameters must have descriptions properties : false # properties may omit the description field naming : # naming conventions for different components of the spec paths : KebabCase tags : PascalCase operation : CamelCase parameters : SnakeCase You can also use the --config <file> flag to specify a different file. See Rules Docs Contributing \u00b6 If you find this project useful please consider contributing back! If you have a new features (i.e. new rules) or you've encountered a bug that you'd like to fix then please create a GitHub issue \ud83d\ude03. Building & Test \u00b6 # Build go build ./main.go # Test go test ./... # Create release binaries make # Cleanup make clean Build & Serve Docs \u00b6 cd docs pip install -r requirements.txt # Serve on localhost:8000 (for development) mkdocs serve # Build static docs site mkdocs build","title":"Getting Started"},{"location":"#openapi-linter","text":"A simple linter for openapi (swagger) specs. Documentation","title":"OpenAPI Linter"},{"location":"#installation","text":"Download - Github Releases Page OpenAPI Linter is a single executable binary. You can download the latest release for your platform from the Github Releases page linked above. Or you can build it from source: git clone https://github.com/place1/openapi-linter cd openapi-linter go build ./openapi-linter --help","title":"Installation"},{"location":"#quickstart","text":"Once you've got the binary (make sure it's on your $PATH ) you can use it like this: openapi-linter ./path/to/openapi.yaml By default openapi-linter will look for a config file in the current directory called openapi-linter.yaml . Here's an example config file with some comments: # openapi-linter.yaml rules : noEmptyOperationIDs : true # make sure all operations have an ID noEmptyDescriptions : operations : true # operations must have descriptions parameters : true # parameters must have descriptions properties : false # properties may omit the description field naming : # naming conventions for different components of the spec paths : KebabCase tags : PascalCase operation : CamelCase parameters : SnakeCase You can also use the --config <file> flag to specify a different file. See Rules Docs","title":"Quickstart"},{"location":"#contributing","text":"If you find this project useful please consider contributing back! If you have a new features (i.e. new rules) or you've encountered a bug that you'd like to fix then please create a GitHub issue \ud83d\ude03.","title":"Contributing"},{"location":"#building-test","text":"# Build go build ./main.go # Test go test ./... # Create release binaries make # Cleanup make clean","title":"Building &amp; Test"},{"location":"#build-serve-docs","text":"cd docs pip install -r requirements.txt # Serve on localhost:8000 (for development) mkdocs serve # Build static docs site mkdocs build","title":"Build &amp; Serve Docs"},{"location":"rules/","text":"naming Check for consistent naming conventions within components of the spec. The supported naming conventions are: PascalCase CamelCase KebabCase SnakeCase rules : naming : paths : KebabCase tags : PascalCase operation : CamelCase parameters : SnakeCase definitions : PascalCase properties : camelCase noEmptyDescriptions Disallows empty descriptions for various components of the spec. A value of true will cause empty or missing descriptions to become errors. false or omitted will allow empty descriptions. rules : noEmptyDescriptions : operations : true properties : true parameters : false noEmptyOperationIDs Disallows empty operation IDs Example rules : noEmptyOperationIDs : true Good paths : /pets : get : operationId : listPets ... Bad paths : /pets : get : operationId : \"\" ... slashTerminatedPaths Check that paths consistently end with a slash or not. A value of true requires paths to end in a slash. A value of false will require all paths to not end with a slash. Example rules : slashTerminatedPaths : true Good paths : /pets/ : ... Bad paths : /pets : ... noEmptyTags Check that all operations have at least 1 non-empty tag Example rules : noEmptyTags : true Good paths : /pets/ : get : tags : - pets ... Bad paths : /pets/ : get : tags : [] ... noUnusedDefinitions Disallows definitions that aren't used anywhere Example rules : noUnusedDefinitions : true Good paths : /pets/ : responses : 200 : schema : $ref : '#/definitions/User' definitions : User : type : object ... Bad paths : /pets/ : responses : 200 : schema : type : object definitions : User : type : object noDuplicateOperationIDs Disallows duplicate operation IDs. Example rules : noDuplicateOperationIDs : true Good paths : /pets/ : operationId : listPets /pets/{id}/ : operationId : getPet Bad paths : /pets/ : operationId : listPets /pets/{id}/ : operationId : listPets noMissingRequiredProperties Disallows properties from being listed as \"required\" without being defined under \"properties\" of a schema. Example rules : noMissingRequiredProperties : true Good definitions : User : type : object required : - id - username properties : id : type : string username : type : string Bad definitions : User : type : object required : - id - username properties : username : type : string","title":"Rules"}]}